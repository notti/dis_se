\bibliographystyle{./IEEEtran}
\bibliography{./IEEEabrv,./IEEEexample}

@misc{anand_qualcomm,
	title = {Qualcomm's Snapdragon 808/810: 20nm High-End 64-bit {SoCs} with {LTE} Category 6/7 Support in 2015},
	shorttitle = {Qualcomm's Snapdragon 808/810},
	url = {http://www.anandtech.com/show/7925/qualcomms-snapdragon-808810-20nm-highend-64bit-socs-with-lte-category-67-support-in-2015},
	urldate = {2014-08-24},
}

@misc{kanter_medfield,
	title = {Medfield, Intel's x86 Phone Chip},
	url = {http://www.realworldtech.com/medfield/},
	abstract = {For 4 years, Intel has struggled to move into the market for mobile devices. Conventional wisdom holds that x86 is too inefficient for smart phones. The recently announced 32nm Medfield proves that x86 is a viable option and that Intel can design smart phone products. We explore the Medfield {SoC} and analyze the impact on Intel’s mobile strategy.},
	urldate = {2014-08-24},
	author = {Kanter, David},
}

@misc{anand_allwinner,
	title = {More Details on Allwinner's A31 Quad Core Cortex A7 {SoC}},
	url = {http://www.anandtech.com/show/6604/more-details-on-allwinners-a31-quad-core-a7-soc},
	urldate = {2014-08-24},
}

@misc{wiki_unified_2014,
	title = {Unified shader model},
	copyright = {Creative Commons Attribution-{ShareAlike} License},
	url = {http://en.wikipedia.org/w/index.php?title=Unified_shader_model&oldid=614354150},
	abstract = {The Unified Shader Model (known in {OpenGL} as simply "Unified Shader Model," known in Direct3D 10 as "Shader Model 4.0"), uses a consistent instruction set across all shader types (geometry, vertex and pixel shaders).[1] All shader types have almost the same capabilities - they can read from textures, data buffers and perform the same set of arithmetic instructions.},
	language = {en},
	urldate = {2014-08-24},
	journal = {Wikipedia, the free encyclopedia},
	month = aug,
	year = {2014},
}

@misc{amd_hsa,
	title = {What is Heterogeneous System Architecture ({HSA})?},
	url = {http://developer.amd.com/resources/heterogeneous-computing/what-is-heterogeneous-system-architecture-hsa/},
	abstract = {The Challenges with Computing Today The computing industry is approaching a formidable obstacle course where anyone wishing to drive advances in computing technology must carefully negotiate several key trade-offs. First, ...},
	urldate = {2014-08-24},
	journal = {{AMD}},
}

@inproceedings{walter_era_2009,
	address = {New York, {NY}, {USA}},
	series = {{NoCArc} '09},
	title = {The Era of Many-modules {SoC}: Revisiting the {NoC} Mapping Problem},
	isbn = {978-1-60558-774-5},
	shorttitle = {The Era of Many-modules {SoC}},
	url = {http://doi.acm.org/10.1145/1645213.1645224},
	doi = {10.1145/1645213.1645224},
	abstract = {Due to technology scaling, it is expected that future chips would integrate tens to hundreds of functional units. The growing power and design costs limit the benefit of continuously increasing the universality and complexity of these units and motivate the usage of specialized hardware modules. These modules are likely to be replicated in order to exploit the inherent parallelism of many tasks. This trend already exists in {CMPs} (moving from multi-core to many-cores), {ASSPs} and {FPGAs}. In this paper, we revisit the network on-chip ({NoC}) mapping problem in light of this expected trend. Specifically, we leverage the use of on-chip replicated specialized modules to minimize traffic and hence to reduce the power consumed by the {NoC}. We further improve the interconnect efficiency by making the mapping algorithm aware of the set of modules traversed by application data. To this end, we present an enhanced modeling of the resources and timing requirements within a system on-chip ({SoC}). We evaluate the benefit of the proposed approach and show a significant reduction in the cost of communication.},
	urldate = {2014-08-23},
	booktitle = {Proceedings of the 2Nd International Workshop on Network on Chip Architectures},
	publisher = {{ACM}},
	author = {Walter, Isask'har and Cidon, Israel and Kolodny, Avinoam and Sigalov, Daniel},
	year = {2009},
	keywords = {mapping, Network on-Chip, optimization, System on-Chip},
	pages = {43–48},
}

@inproceedings{martina_fpga_2002,
	title = {{FPGA} system-on-chip soft {IP} design: a reconfigurable {DSP}},
	volume = {3},
	shorttitle = {{FPGA} system-on-chip soft {IP} design},
	doi = {10.1109/MWSCAS.2002.1187004},
	abstract = {In this paper a novel architecture for a scalable {DSP} core is proposed. Due to the increase of system resources available on last generation {FPGA}, the System-on-Chip paradigm can be borrowed from classical silicon implementations into reconfigurable environments. Presently, off-the-shelf devices suffer the need for remarkable static power consumption: however it is forecastable that technology improvements will extend {FPGA} usage to mobile systems. Despite the increasing importance gathered by reconfigurable computing, a lack of retargetable soft-processor {IP} is felt. In particular, this {IP} aims to fill the existing gap between specific coprocessor units and general purpose soft cores. The proposed architecture exhibits interesting figures both in terms of area occupation as well as maximum operative clock frequency. In order to validate the system performance, some common telecommunication algorithms have been mapped on the {DSP}. Good experimental results have been obtained running at 89 {MHz} on a {XILINX} {XCV}1000.},
	booktitle = {The 2002 45th Midwest Symposium on Circuits and Systems, 2002. {MWSCAS}-2002},
	author = {Martina, M. and Molino, A and Vacca, F.},
	month = aug,
	year = {2002},
	keywords = {89 {MHz}, Clocks, Computer architecture, Coprocessors, Digital signal processing, digital signal processing chips, {DSP} chip, Energy consumption, field programmable gate arrays, {FPGA} system-on-chip soft {IP} design, Frequency, mobile system, reconfigurable architecture, reconfigurable architectures, Silicon, System-on-a-chip, system-on-chip, Technology forecasting, telecommunication algorithm, {XILINX} {XCV} 1000},
	pages = {III--196-III-199 vol.3},
}

@inproceedings{severance_soft_2014,
	address = {New York, {NY}, {USA}},
	series = {{FPGA} '14},
	title = {Soft Vector Processors with Streaming Pipelines},
	isbn = {978-1-4503-2671-1},
	url = {http://doi.acm.org/10.1145/2554688.2554774},
	doi = {10.1145/2554688.2554774},
	abstract = {Soft vector processors ({SVPs}) achieve significant performance gains through the use of parallel {ALUs}. However, since {ALUs} are used in a time-multiplexed fashion, this does not exploit a key strength of {FPGA} performance: pipeline parallelism. This paper shows how streaming pipelines can be integrated into the datapath of a {SVP} to achieve dramatic speedups. The {SVP} plays an important role in supplying the pipeline with high-bandwidth input data and storing its results using on-chip memory. However, the {SVP} must also perform the housekeeping tasks necessary to keep the pipeline busy. In particular, it orchestrates data movement between on-chip memory and external {DRAM}, it pre- or post-processes the data using its own {ALUs}, and it controls the overall sequence of execution. Since the {SVP} is programmed in C, these tasks are easier to develop and debug than using a traditional {HDL} approach. Using the N-body problem as a case study, this paper illustrates how custom streaming pipelines are integrated into the {SVP} datapath and multiple techniques for generating them. Using a custom pipeline, we demonstrate speedups over 7,000 times and performance-per-{ALM} over 100 times better than Nios {II}/f. The custom pipeline is also 50 times faster than a naive Intel Core i7 processor implementation.},
	urldate = {2014-08-23},
	booktitle = {Proceedings of the 2014 {ACM}/{SIGDA} International Symposium on Field-programmable Gate Arrays},
	publisher = {{ACM}},
	author = {Severance, Aaron and Edwards, Joe and Omidian, Hossein and Lemieux, Guy},
	year = {2014},
	keywords = {processor, vector},
	pages = {117–126},
}

@inproceedings{mei_design_2004,
	address = {Washington, {DC}, {USA}},
	series = {{DATE} '04},
	title = {Design Methodology for a Tightly Coupled {VLIW}/Reconfigurable Matrix Architecture: A Case Study},
	isbn = {0-7695-2085-5},
	shorttitle = {Design Methodology for a Tightly Coupled {VLIW}/Reconfigurable Matrix Architecture},
	url = {http://dl.acm.org/citation.cfm?id=968879.969178},
	abstract = {Coarse-grained reconfigurable architectures have seen growing importance recently. Design tools and methodology are essential to their success. Based on our previous work on modulo scheduling algorithms and a novel architecture with tightly coupled {VLIW}/reconfigurable matrix, we present a C-based design flow using an {MPEG}-2 decoder as a design example. The application is mapped to the architecture in less than one person-week starting from a software implementation. The kernel and overall speedup over the reference {VLIW} are 4.84 and 3.05 respectively. The case study shows that our methodology and architecture can deliver a competitive package in terms of design efforts and performance over other programmable architectures.},
	urldate = {2014-08-24},
	booktitle = {Proceedings of the Conference on Design, Automation and Test in Europe - Volume 2},
	publisher = {{IEEE} Computer Society},
	author = {Mei, Bingfeng and Vernalde, Serge and Verkest, Diederik and Lauwereins, Rudy},
	year = {2004},
	pages = {21224–},
}

@inproceedings{thurston_parsing_2006,
	address = {Berlin, Heidelberg},
	series = {{CIAA}'06},
	title = {Parsing Computer Languages with an Automaton Compiled from a Single Regular Expression},
	isbn = {3-540-37213-X, 978-3-540-37213-4},
	url = {http://dx.doi.org/10.1007/11812128_31},
	doi = {10.1007/11812128_31},
	abstract = {When a programmer is faced with the task of producing a parser for a context-free language there are many tools to choose from. We find that programmers avoid such tools when making parsers for simpler, domain-specific computer languages, such as file formats, communication protocols and end-user inputs. Since these languages often meet the criteria for regular languages, the extra run-time effort required for supporting the recursive nature of context-free languages is wasted.},
	urldate = {2014-08-25},
	booktitle = {Proceedings of the 11th International Conference on Implementation and Application of Automata},
	publisher = {Springer-Verlag},
	author = {Thurston, Adrian D.},
	year = {2006},
	note = {00014},
	pages = {285--286}
}

@misc{xilinx_fir,
    title={IP LogiCORE FIR Compiler v5.0},
    url={http://www.xilinx.com/support/documentation/ip_documentation/fir_compiler_ds534.pdf},
    urldate = {2014-08-24}
}

@misc{xilinx_fft,
    title={LogiCORE IP Fast Fourier Transform v7.1},
    url={http://www.xilinx.com/support/documentation/ip_documentation/xfft_ds260.pdf},
    urldate = {2014-08-24}
}


